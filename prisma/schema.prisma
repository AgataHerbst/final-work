
generator client {
  provider        = "prisma-client-js"
 
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

   user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  basketGoods   BasketGoods[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Post {
  id        Int     @id @default(autoincrement()) //номер поста
  content   String? //содержание
  createAt  DateTime @default(now()) //время создания
  updateAt  DateTime @updatedAt
  userId    String 
  user      User     @relation(fields: [userId], references: [id])
 
}
model BasketGoods { //корзина товаров
  id        Int      @id @unique //номер заказа
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  total     Float //всего
  createdAt DateTime @default(now()) //время и дата заказа
  updatedAt DateTime @updatedAt
  Goods     Goods[] //масив товаров
}

model Goods {//товары
  id            Int          @id @default(autoincrement())
  name          String //название товара
  createdAt     DateTime     @default(now()) 
  updatedAt     DateTime     @updatedAt
  BasketGoods   BasketGoods? @relation(fields: [basketGoodsId], references: [id])
  basketGoodsId Int?
}
enum BasketState {
  ACTIVE
  EXPIRED
  COMPLETED
}